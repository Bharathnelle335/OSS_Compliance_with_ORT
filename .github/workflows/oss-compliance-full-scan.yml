name: ORT Full Scan (CLI with SCANOSS)

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Select scan input type'
        required: true
        default: 'upload-zip'
        type: choice
        options:
          - upload-zip
          - upload-tar
          - git
      git_url:
        description: 'Git repository URL (only required if scan_type is git)'
        required: false

jobs:
  ort-full-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pyyaml pandas openpyxl

      - name: Download and Extract ORT CLI
        run: |
          curl -L --fail --retry 3 -o ort.zip https://github.com/oss-review-toolkit/ort/releases/download/54.0.0/ort-54.0.0.zip
          unzip ort.zip -d ort-cli
          chmod +x ort-cli/ort-54.0.0/bin/ort

      - name: Extract uploaded ZIP source
        if: ${{ github.event.inputs.scan_type == 'upload-zip' }}
        run: |
          mkdir -p uploaded-source
          unzip "*.zip" -d uploaded-source

      - name: Extract uploaded image TAR
        if: ${{ github.event.inputs.scan_type == 'upload-tar' }}
        run: |
          mkdir -p extracted-tar
          file=$(find . -maxdepth 1 -type f \( -iname "*.tar" -o -iname "*.tar.gz" -o -iname "*.tgz" \) | head -n 1)
          [ -z "$file" ] && echo "❌ No TAR file found" && exit 1
          tar -xf "$file" -C extracted-tar

      - name: Clone Git repository
        if: ${{ github.event.inputs.scan_type == 'git' }}
        run: |
          git clone ${{ github.event.inputs.git_url }} repo-to-scan

      - name: Set scan path
        id: set-path
        run: |
          if [ "${{ github.event.inputs.scan_type }}" == "upload-zip" ]; then echo "scan_path=uploaded-source" >> $GITHUB_OUTPUT;
          elif [ "${{ github.event.inputs.scan_type }}" == "upload-tar" ]; then echo "scan_path=extracted-tar" >> $GITHUB_OUTPUT;
          elif [ "${{ github.event.inputs.scan_type }}" == "git" ]; then echo "scan_path=repo-to-scan" >> $GITHUB_OUTPUT; fi

      - name: Clean and Prepare Directories
        run: |
          rm -rf ort-output
          mkdir -p ort-output/analyzer
          mkdir -p /home/runner/.ort/config
          cp .ort/config/config.yml /home/runner/.ort/config/config.yml

      - name: Run ORT Analyzer (ignore errors)
        run: |
          ort-cli/ort-54.0.0/bin/ort analyze \
            -i "${{ steps.set-path.outputs.scan_path }}" \
            -o ort-output/analyzer || echo "⚠ Analyzer had some issues but continuing."

      - name: Merge Analyzer Results
        run: |
          mkdir -p ort-output/analyzer
          if compgen -G "ort-output/analyzer/projects/*/analyzer-result.yml" > /dev/null; then
            ort-cli/ort-54.0.0/bin/ort merge-results \
              -i ort-output/analyzer/projects \
              -o ort-output/analyzer
          else
            echo "⚠ No analyzer results to merge, continuing anyway."
          fi

      - name: Run SCANOSS Scanner
        run: |
          curl -sSL https://raw.githubusercontent.com/scanoss/scanoss.cli/main/install.sh | sh
          chmod +x scanoss
          ./scanoss --src "${{ steps.set-path.outputs.scan_path }}" --output ort-output/scanner/scanoss.spdx.json || echo "⚠ SCANOSS scan failed."

      - name: Run Advisor
        run: |
          ort-cli/ort-54.0.0/bin/ort advise \
            -i ort-output/analyzer/analyzer-result.yml \
            -o ort-output/advisor || echo "⚠ Advisor failed"

      - name: Run Evaluator
        run: |
          ort-cli/ort-54.0.0/bin/ort evaluate \
            -i ort-output/advisor/advisor-result.yml \
            -o ort-output/evaluator || echo "⚠ Evaluator failed"

      - name: Generate WebApp Report
        run: |
          ort-cli/ort-54.0.0/bin/ort report \
            -i ort-output/analyzer/analyzer-result.yml \
            -i ort-output/advisor/advisor-result.yml \
            -i ort-output/evaluator/evaluation-result.yml \
            -o ort-output/report \
            -f WebApp || echo "⚠ WebApp report failed"

      - name: Generate Excel Report (if possible)
        run: |
          python3 generate_excel_from_ort_full.py \
            ort-output/analyzer/analyzer-result.yml \
            ort-output/evaluator/evaluation-result.yml \
            ort-output/advisor/advisor-result.yml \
            ort-output/scanner/scanoss.spdx.json || echo "⚠ Excel generation failed"

      - name: Upload ORT Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ort-full-pipeline-results
          path: ort-output/
